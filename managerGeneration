--------------------------------------------------------------------------------------------------------------
-- PERLIN NOISE
-- original code by Ken Perlin: http://mrl.nyu.edu/~perlin/noise/

perlin = {}
perlin.p = {}
perlin.permutation = { 151,160,137,91,90,15,
	131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,
	190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,
	88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,
	77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,
	102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,
	135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,
	5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,
	223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,
	129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,
	251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,
	49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,
	138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180
}
perlin.size = 256
perlin.gx = {}
perlin.gy = {}
perlin.randMax = 256

function perlin:load(  )
	for i=1,self.size do
		self.p[i] = self.permutation[i]
		self.p[256+i] = self.p[i]
	end
end

function perlin:noise( x, y, z )
	local X = math.floor(x) % 256
	local Y = math.floor(y) % 256
	local Z = math.floor(z) % 256
	x = x - math.floor(x)
	y = y - math.floor(y)
	z = z - math.floor(z)
	local u = fade(x)
	local v = fade(y)
	local w = fade(z)
	local A  = self.p[X+1]+Y
	local AA = self.p[A+1]+Z
	local AB = self.p[A+2]+Z
	local B  = self.p[X+2]+Y
	local BA = self.p[B+1]+Z
	local BB = self.p[B+2]+Z

	return lerp(w, lerp(v, lerp(u, grad(self.p[AA+1], x  , y  , z  ),
		grad(self.p[BA+1], x-1, y  , z  )),
		lerp(u, grad(self.p[AB+1], x  , y-1, z  ),
			grad(self.p[BB+1], x-1, y-1, z  ))),
		lerp(v, lerp(u, grad(self.p[AB+2], x  , y  , z-1),
			grad(self.p[BA+2], x-1, y  , z-1)),
			lerp(u, grad(self.p[AB+2], x  , y-1, z-1),
				grad(self.p[BB+2], x-1, y-1, z-1))))
end

function fade( t )
	return t * t * t * (t * (t * 6 - 15) + 10)
end

function lerp( t, a, b )
	return a + t * (b - a)
end

function grad( hash, x, y, z )
	local h = hash % 16
	local u = h < 8 and x or y
	local v = h < 4 and y or ((h == 12 or h == 14) and x or z)
	return ((h % 2) == 0 and u or -u) + ((h % 3) == 0 and v or -v)
end

-----------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------

--Get les parametre de generation
local function getParameter(seed)
	local generator = Random.new(seed)
	local generationParameter = {
		["randomGenerator"] = generator,
		
		["generationDistance"] = 6, -- in number of chunks
		["loadingDistance"] = 5,
		["dislayDistance"] = 4,

		["mapBorderW"] = 100,
		["mapBorderH"] = 100,
		["chunkSizeW"] = 20,
		["chunkSizeH"] = 20,

		["sizeBlock"] = 5,

		["seed"] = seed,
		["height_generator"] = {
			["amplitude"] = {["X"] = generator:NextInteger(1, 4), ["Z"] = generator:NextInteger(1, 4)},
			["frequence"] = {["X"] = generator:NextNumber(0.1,0.5)/3, ["Z"] = generator:NextNumber(0.1,0.5)/3},
			["phase"] = { 
				["11"] = generator:NextInteger(0, 20), ["12"] = generator:NextInteger(0, 20), ["13"] = generator:NextInteger(0, 20), 
				["21"] = generator:NextInteger(0, 20), ["22"] = generator:NextInteger(0, 20), ["23"] = generator:NextInteger(0, 20)
			}
		},
		["biome_generator"] = {
			["amplitude"] = 1.2,
			["frequence"] = {
				["X"] = 0.01, ["Y"] = 0.01
			},
			["phase"] = { 
				["11"] = generator:NextNumber(0,0.01), ["12"] = generator:NextNumber(0,0.01), ["13"] = generator:NextNumber(0,0.01), 
				["21"] = generator:NextNumber(0,0.01), ["22"] = generator:NextNumber(0,0.01), ["23"] = generator:NextNumber(0,0.01)
			}
		},
		
		
		--Biome lié avec leur poids d'apparision/taille
		["availableBiome"] = {
			["blank"] = {["id"] = -1},
			["neige"] = {["id"] = 0},
			["forest"] = {["id"] = 1},
			["plain"] = {["id"] = 2},
			["lac"] = {["id"] = 3},
			["desert"] = {["id"] = 4},
			["basalt"] = {["id"] = 5},
			["montagne"] = {["id"] = 6}
		}
	}
	return generationParameter
end


-----------------------------------------------------------------------------------------------------------
-- GENERATION 

--Existe t-il un chunk déja générer ? Sinon generons le
local function generateNewDataChunk(chunkCoord, generationParameter)
	--Detect si on peux le generer:
	--Somme nous hors de la bordure ?
	if (-generationParameter["mapBorderW"] <= chunkCoord.X and chunkCoord.X < generationParameter["mapBorderW"] and 
		-generationParameter["mapBorderH"] <= chunkCoord.Y and chunkCoord.Y < generationParameter["mapBorderH"]) then
		
		local randomGenerator = generationParameter["randomGenerator"]
		local isGenerator = false
		if (randomGenerator:NextInteger(1,100) < 20) then
			isGenerator = true
		end
		
		local chunkData = { 
			["coord"] = chunkCoord,
			["isLoaded"] = false,
			["isBiomeGenerator"] = isGenerator,
			["map"] = {},
			["biome_map"] = {}
		}
		
	
		
		for i = 0, generationParameter["chunkSizeW"]-1, 1 do
			chunkData["map"][tostring(i)] = {}
			chunkData["biome_map"][tostring(i)] = {}
			for j = 0, generationParameter["chunkSizeW"]-1, 1 do
				chunkData["map"][tostring(i)][tostring(j)] = {}
				chunkData["biome_map"][tostring(i)][tostring(j)] = {}
				
				local chunkRefI = i + chunkCoord.X*generationParameter["chunkSizeW"]
				local chunkRefJ = j + chunkCoord.Y*generationParameter["chunkSizeH"]

				----------------------------------------------------------------------------------------------------------------------------
				-- BIOME MAP
				
				local biome_noise1 = perlin:noise(chunkRefI/15, chunkRefJ/15, 1)  --Dispertion biome
				--local biome_noise2 = perlin:noise(chunkRefI, chunkRefJ, 0.1)  --Blur biome border
				local maxIDBiome = 6
				local freqX = generationParameter["biome_generator"]["frequence"]["X"]
				local freqY = generationParameter["biome_generator"]["frequence"]["Y"]
				
				local randomXID = generationParameter["biome_generator"]["amplitude"]*( (maxIDBiome/2)*math.sin(freqX*chunkRefI+generationParameter["biome_generator"]["phase"]["11"])+(maxIDBiome/2) + (maxIDBiome/2)*math.sin(freqX*2*chunkRefI+generationParameter["biome_generator"]["phase"]["12"])+(maxIDBiome/2) + (maxIDBiome/2)*math.sin(freqX*4*chunkRefI+generationParameter["biome_generator"]["phase"]["13"])+(maxIDBiome/2))  / 3
				local randomYID = generationParameter["biome_generator"]["amplitude"]*( (maxIDBiome/2)*math.sin(freqY*chunkRefJ+generationParameter["biome_generator"]["phase"]["21"])+(maxIDBiome/2) + (maxIDBiome/2)*math.sin(freqY*2*chunkRefJ+generationParameter["biome_generator"]["phase"]["22"])+(maxIDBiome/2) + (maxIDBiome/2)*math.sin(freqY*4*chunkRefJ+generationParameter["biome_generator"]["phase"]["23"])+(maxIDBiome/2))  / 3
				
				local randomID = math.floor(((randomXID + randomYID) / 2) + (biome_noise1))
				if (randomID > maxIDBiome) then randomID = maxIDBiome end
				if (randomID < 0) then randomID = 0 end
				
				randomID = math.abs(randomID)
				local randomName = "blank"
				for biomeName, biomeParam in pairs(generationParameter["availableBiome"]) do
					if (biomeParam["id"] == randomID) then randomName = biomeName end
				end
				
				chunkData["biome_map"][tostring(i)][tostring(j)] = {
					["id"] = randomID,
					["name"] = randomName
				}
				
				----------------------------------------------------------------------------------------------------------------------------
				-- CUBE MAP

				--Calcul de la hauteur du cube
				local noise = perlin:noise(chunkRefI/10, chunkRefJ/10, 0.5)
				local newHeightX = 
					generationParameter["height_generator"]["amplitude"]["X"]*math.sin(generationParameter["height_generator"]["frequence"]["X"]*chunkRefI + generationParameter["height_generator"]["phase"]["11"]) 
					+ generationParameter["height_generator"]["amplitude"]["X"]/2*math.sin(generationParameter["height_generator"]["frequence"]["X"]*chunkRefI*2 + generationParameter["height_generator"]["phase"]["12"])
					+ generationParameter["height_generator"]["amplitude"]["X"]/4*math.sin(generationParameter["height_generator"]["frequence"]["X"]*chunkRefI*4 + generationParameter["height_generator"]["phase"]["13"])

				local newHeightZ = 
					generationParameter["height_generator"]["amplitude"]["Z"]*math.sin(generationParameter["height_generator"]["frequence"]["Z"]*chunkRefJ + generationParameter["height_generator"]["phase"]["21"]) 
					+ generationParameter["height_generator"]["amplitude"]["Z"]/2*math.sin(generationParameter["height_generator"]["frequence"]["Z"]*chunkRefJ*2 + generationParameter["height_generator"]["phase"]["22"]) 
					+ generationParameter["height_generator"]["amplitude"]["Z"]/4*math.sin(generationParameter["height_generator"]["frequence"]["Z"]*chunkRefJ*4 + generationParameter["height_generator"]["phase"]["23"])

				local height = math.floor(((newHeightX + newHeightZ) / 2)*noise*5)

				if (height < 0) then 
					local cube = {
						["worldCoord"] = Vector3.new(
							i*generationParameter["sizeBlock"] + chunkData["coord"].X*generationParameter["chunkSizeW"]*generationParameter["sizeBlock"], 
							0, 
							j*generationParameter["sizeBlock"] + chunkData["coord"].Y*generationParameter["chunkSizeH"]*generationParameter["sizeBlock"]),
						["localCoord"] = Vector3.new(i, 0, j),
						["size"] = generationParameter["sizeBlock"],
						["id"] = randomID,
						["isDestroyable"] = true
					}
					chunkData["map"][tostring(i)][tostring(j)][tostring(0)] = cube
				else
					while (height >= 0) do
						--Initialisation du cube
						local cube = {
							["worldCoord"] = Vector3.new(
								i*generationParameter["sizeBlock"] + chunkData["coord"].X*generationParameter["chunkSizeW"]*generationParameter["sizeBlock"], 
								math.abs(height) * generationParameter["sizeBlock"], 
								j*generationParameter["sizeBlock"] + chunkData["coord"].Y*generationParameter["chunkSizeH"]*generationParameter["sizeBlock"]),
							["localCoord"] = Vector3.new(i, math.abs(height), j),
							["size"] = generationParameter["sizeBlock"],
							["id"] = randomID,
							["isDestroyable"] = true
						}
						chunkData["map"][tostring(i)][tostring(j)][tostring(math.abs(height))] = cube
						height = height - 1						
					end
				end
				
				
			end
		end
		return chunkData
	end
end


--Cree les data des chunk quand il le faut et agrandis notre map global
--Fonction called every X times
local function managerMapGeneration(playerPos, MAP)
	local playerPosXinChunkRef = math.floor(playerPos.X / (MAP["generationParameter"]["chunkSizeW"] * MAP["generationParameter"]["sizeBlock"]))
	local playerPosZinChunkRef = math.floor(playerPos.Z / (MAP["generationParameter"]["chunkSizeH"] * MAP["generationParameter"]["sizeBlock"]))
	
	-- i/j la pos du chunk
	for i = playerPosXinChunkRef-MAP["generationParameter"]["generationDistance"], playerPosXinChunkRef+MAP["generationParameter"]["generationDistance"], 1 do
		for j = playerPosZinChunkRef-MAP["generationParameter"]["generationDistance"], playerPosZinChunkRef+MAP["generationParameter"]["generationDistance"], 1 do
			--Check si les coordonnées du chunk sont dans le rayon de generation
			if (math.pow(MAP["generationParameter"]["generationDistance"], 2) >= math.pow(i-playerPosXinChunkRef, 2) + math.pow(j-playerPosZinChunkRef, 2))  then
				--Check si le chunk existe deja
				if (MAP["map_data"][tostring(i) .. "/" .. tostring(j)] == nil) then
					--On genere les data du chunk & save
					local chunkCoord = Vector2.new(i, j)
					local chunkData = generateNewDataChunk(chunkCoord, MAP["generationParameter"])
					
					MAP["map_data"][tostring(i) .. "/" .. tostring(j)] = chunkData
					MAP["nb_chunk"] = MAP["nb_chunk"] + 1
				end
			end
		end
	end
	
	return MAP
end



-----------------------------------------------------------------------------------------------------------
-- SAVE MAP IN DATA STORAGE





-----------------------------------------------------------------------------------------------------------
-- INITIALISATION

local Players = game:GetService("Players")
local RS = game:GetService("RunService")
local param = getParameter(0)
local LOOP_COUNT = 60*2
local count = 0
_G.MAP = {
	--["owner"] = localPlayer.UserId,
	["generationParameter"] = param,
	["nb_chunk"] = 0,
	["map_data"] = {}
}
perlin:load()



-----------------------------------------------------------------------------------------------------------
-- MAIN

local function everyXTimes()
	if count > LOOP_COUNT then
		count = 0
		
		local AllPlayers = Players:GetPlayers()
		if (AllPlayers ~= nil) then
			
			--GENERATION
			for _, player in pairs(AllPlayers) do
				if (workspace:FindFirstChild(player.Name)) then
					local playerPosition = player.Character.HumanoidRootPart.Position
					_G.MAP = managerMapGeneration(playerPosition, _G.MAP)
				end
			end
			
		end
	else
		count = count + 1
	end
end

RS.Heartbeat:Connect(everyXTimes)


















-- INITIAL GENERATION



_G.IS_SERVER_READY = false
local onPlayerConnectionSendParam = game.ReplicatedStorage:WaitForChild("onPlayerConnectionSendParam")
local function onFirstSpawn(player)
	if _G.IS_SERVER_READY == false then		
		_G.MAP = managerMapGeneration(Vector3.zero, _G.MAP)
		_G.IS_SERVER_READY = true	
	end

	if _G.IS_SERVER_READY then
		if not workspace:FindFirstChild(player.Name) then
			local spawnMapData = {}
			for i = -5, 5, 1 do
				for j = -5, 5, 1 do
					if (_G.MAP["map_data"][tostring(i) .. "/" .. tostring(j)] ~= nil) then
						spawnMapData[tostring(i) .. "/" .. tostring(j)] = _G.MAP["map_data"][tostring(i) .. "/" .. tostring(j)]
					end
				end
			end
			onPlayerConnectionSendParam:FireClient(player, _G.MAP["generationParameter"], spawnMapData)
			player:LoadCharacter()
		end	
	end
	
end
Players.PlayerAdded:Connect(onFirstSpawn)
